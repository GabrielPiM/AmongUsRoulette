@page "/map"
@using AmongUsRoulette.Models.MapInfos
@using AmongUsRoulette.Shared.MapInfo
@inject AmongUsRoulette.Shared.Utils.CurrentLanguage language

@inject HttpClient Http
@inject NavigationManager NavManager

@implements IDisposable

<div class="map-container">

    @if (mapaAtual != null)
    {
        <div class="centralizar">

            <h1>@mapaAtual.Name</h1>

        </div>

        <InfoComponent Infos="@mapaAtual.TheMap" />
        <InfoListComponent InfosList="@mapaAtual.VisualTasks" />
        <InfoComponent Infos="@mapaAtual.TheVents" />
        <InfoListComponent InfosList="@mapaAtual.Sabotage" />
        <InfoUtilitiesComponent InfosList="@mapaAtual.Utilities" />
    }

</div>



@code {

    public string nameMap;
    private List<Map> Mapas;
    private Map mapaAtual;

    protected override async Task OnInitializedAsync()
    {

        Mapas = new List<Map>();     
        Mapas = await Http.GetFromJsonAsync<List<Map>>($"data/{language.name}/map_infos.json");     
        GetQueryStringValues();
        CheckNameMap();
        NavManager.LocationChanged += HandleLocationChanged;

    }

    //Verifca nome do mapa
    public void CheckNameMap()
    {
        mapaAtual = Mapas.Find(m => m.Name == nameMap);

        if (mapaAtual == null)
            mapaAtual = Mapas.Find(m => m.Name == "The Skeld");
    }

    //atualiza na mesma pagina a query string
    void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        GetQueryStringValues();
        CheckNameMap();
        StateHasChanged();
    }

    //get query string
    void GetQueryStringValues()
    {
        AmongUsRoulette.Shared.Utils.NavigationManagerExtensions.TryGetQueryString<string>(NavManager, "nameMap", out nameMap);
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

}
